from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from models import User, Question, PrivacySettings
from keyboards import *
import database
from datetime import datetime

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db_user, created = User.get_or_create(
        user_id=user.id,
        defaults={
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
    )
    
    if created:
        PrivacySettings.create(user=db_user)
    
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø gkoll - –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "üîπ –¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –¥—Ä—É–∑–µ–π\n"
        "üîπ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å\n"
        "üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=get_main_menu())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/ask @username - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ /ask @username –∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å!"
    )
    if update.message:
        await update.message.reply_text(help_text)
    else:
        query = update.callback_query
        await query.edit_message_text(help_text, reply_markup=get_main_menu())

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = User.get(User.user_id == update.effective_user.id)
    questions_received = Question.select().where(Question.to_user == user).count()
    questions_answered = Question.select().where(
        (Question.to_user == user) & (Question.answered == True)
    ).count()
    
    profile_text = (
        f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üÜî ID: {user.user_id}\n"
        f"üëÄ –ò–º—è: {user.full_name}\n"
        f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.registration_date.strftime('%d.%m.%Y')}\n\n"
        f"üì• –ü–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_received}\n"
        f"üì§ –û—Ç–≤–µ—Ç–æ–≤ –¥–∞–Ω–æ: {questions_answered}\n\n"
        f"üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤: t.me/{(await context.bot.get_me()).username}?start={user.user_id}"
    )
    
    if update.message:
        await update.message.reply_text(profile_text, reply_markup=get_main_menu())
    else:
        query = update.callback_query
        await query.edit_message_text(profile_text, reply_markup=get_main_menu())

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = User.get(User.user_id == update.effective_user.id)
    privacy = PrivacySettings.get(user=user)
    
    settings_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, –∫—Ç–æ –∏ –∫–∞–∫ –º–æ–∂–µ—Ç —Å —Ç–æ–±–æ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å."
    )
    
    if update.message:
        await update.message.reply_text(settings_text, reply_markup=get_privacy_settings(privacy))
    else:
        query = update.callback_query
        await query.edit_message_text(settings_text, reply_markup=get_privacy_settings(privacy))

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ button_click)

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "main_menu":
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
    
    elif data == "profile":
        await show_profile(update, context)
    
    elif data == "privacy_settings":
        await show_settings(update, context)
    
    elif data == "toggle_anonymous":
        user = User.get(User.user_id == query.from_user.id)
        privacy = PrivacySettings.get(user=user)
        privacy.allow_anonymous_questions = not privacy.allow_anonymous_questions
        privacy.save()
        
        await query.edit_message_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:",
            reply_markup=get_privacy_settings(privacy)
        )
    
    elif data == "toggle_public":
        user = User.get(User.user_id == query.from_user.id)
        privacy = PrivacySettings.get(user=user)
        privacy.allow_public_answers = not privacy.allow_public_answers
        privacy.save()
        
        await query.edit_message_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:",
            reply_markup=get_privacy_settings(privacy)
        )
    
    elif data == "toggle_notify":
        user = User.get(User.user_id == query.from_user.id)
        privacy = PrivacySettings.get(user=user)
        privacy.notify_new_question = not privacy.notify_new_question
        privacy.save()
        
        await query.edit_message_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:",
            reply_markup=get_privacy_settings(privacy)
        )
    
    elif data == "my_questions":
        user = User.get(User.user_id == query.from_user.id)
        unanswered_questions = Question.select().where(
            (Question.to_user == user) & (Question.answered == False)
        )
        
        if unanswered_questions.count() == 0:
            await query.edit_message_text(
                "–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                reply_markup=get_main_menu()
            )
            return
        
        question = unanswered_questions[0]
        question_text = (
            f"‚ùì –í–æ–ø—Ä–æ—Å:\n\n{question.text}\n\n"
            f"üìÖ –î–∞—Ç–∞: {question.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        
        await query.edit_message_text(
            question_text,
            reply_markup=get_question_options(question.id)
        )
    
    elif data == "help_command":
        await help_command(update, context)
    
    elif data.startswith("answer_"):
        question_id = int(data.split("_")[1])
        question = Question.get(Question.id == question_id)
        
        context.user_data["current_question"] = question.id
        await query.edit_message_text(
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=get_back_to_menu()
        )
    
    elif data.startswith("answer_public_"):
        question_id = int(data.split("_")[2])
        question = Question.get(Question.id == question_id)
        
        privacy = PrivacySettings.get(user=User.get(User.user_id == query.from_user.id))
        if not privacy.allow_public_answers:
            await query.edit_message_text(
                "–¢—ã –∑–∞–ø—Ä–µ—Ç–∏–ª –ø—É–±–ª–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.",
                reply_markup=get_main_menu()
            )
            return
        
        context.user_data["current_question"] = question.id
        context.user_data["answer_public"] = True
        await query.edit_message_text(
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=get_back_to_menu()
        )
    
    elif data.startswith("ignore_"):
        question_id = int(data.split("_")[1])
        question = Question.get(Question.id == question_id)
        question.delete_instance()
        
        await query.edit_message_text(
            "–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_main_menu()
        )
    
    elif data == "how_it_works":
        how_text = (
            "ü§ñ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç gkoll?\n\n"
            "1. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–∑—å—è–º –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n"
            "2. –õ—é–¥–∏ –º–æ–≥—É—Ç –∑–∞–¥–∞—Ç—å —Ç–µ–±–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —ç—Ç—É —Å—Å—ã–ª–∫—É\n"
            "3. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –≤–æ–ø—Ä–æ—Å –∏ –º–æ–∂–µ—à—å:\n"
            "   - –û—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ (—Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é)\n"
            "   - –û—Ç–≤–µ—Ç–∏—Ç—å –ø—É–±–ª–∏—á–Ω–æ (–≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ)\n"
            "   - –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n\n"
            "‚öôÔ∏è –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Ç—ã –º–æ–∂–µ—à—å:\n"
            "- –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "- –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
            "- –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö"
        )
        await query.edit_message_text(
            how_text,
            reply_markup=get_main_menu()
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "current_question" in context.user_data:
        question_id = context.user_data["current_question"]
        answer_text = update.message.text
        is_public = context.user_data.get("answer_public", False)
        
        question = Question.get(Question.id == question_id)
        question.answered = True
        question.answer_text = answer_text
        question.answer_public = is_public
        question.answered_at = datetime.now()
        question.save()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å–∞
        if not question.is_anonymous:
            answer_message = (
                f"üì© –¢—ã –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:\n\n"
                f"‚ùì –í–æ–ø—Ä–æ—Å: {question.text}\n\n"
                f"üí¨ –û—Ç–≤–µ—Ç: {answer_text}"
            )
            await context.bot.send_message(
                chat_id=question.from_user.user_id,
                text=answer_message
            )
        
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        del context.user_data["current_question"]
        if "answer_public" in context.user_data:
            del context.user_data["answer_public"]
        
        await update.message.reply_text(
            "‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=get_main_menu()
        )
    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=get_main_menu()
        )

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ask @username –≤–∞—à –≤–æ–ø—Ä–æ—Å",
            reply_markup=get_back_to_menu()
        )
        return
    
    target_username = context.args[0].lstrip('@')
    question_text = ' '.join(context.args[1:])
    
    try:
        target_user = User.get(User.username == target_username)
    except User.DoesNotExist:
        await update.message.reply_text(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.",
            reply_markup=get_back_to_menu()
        )
        return
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏...

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caused error {context.error}")
    
    if update.callback_query:
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", show_alert=True)
    elif update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_menu())