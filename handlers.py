from aiogram import F, types
from aiogram.filters import Command
import random
from database import add_user, add_message, get_stats
from config import dp
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –ü—Ä–∏–∫–æ–ª—å–Ω—ã–µ —Ñ–∏—à–∫–∏
JOKES = {
    "stats": [
        "–Ø —Å–ª–µ–∂—É –∑–∞ —Ç–æ–±–æ–π...",
        "–¢—ã –≤ –º–æ–µ–π –±–∞–∑–µ!",
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —ç—Ç–æ —Å–∫—É—á–Ω–æ, –Ω–æ –≤–æ—Ç:"
    ],
    "number": [
        ("üéâ {}! –î–∞ —Ç—ã –≤–µ–∑—É–Ω—á–∏–∫!", (90, 100)),
        ("üò¢ {}... –ù–µ –ø–æ–≤–µ–∑–ª–æ...", (1, 10)),
        ("–¢–≤–æ–µ —á–∏—Å–ª–æ: {}", (10, 90))
    ],
    "facts": [
        "–ö—Ä—è–∫–∞–Ω—å–µ —É—Ç–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —ç—Ö–∞!",
        "–£ –º–µ–¥—É–∑ –Ω–µ—Ç –º–æ–∑–≥–∞!",
        "–°–µ—Ä–¥—Ü–µ –∫—Ä–µ–≤–µ—Ç–∫–∏ –≤ –≥–æ–ª–æ–≤–µ!"
    ],
    "wisdoms": [
        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–∞–µ—Ç—Å—è –¥–µ–Ω—å–≥–∞–º–∏ - —ç—Ç–æ —Ä–∞—Å—Ö–æ–¥—ã",
        "–õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –∏ –ø–æ–∂–∞–ª–µ—Ç—å, —á–µ–º –Ω–µ —Å–¥–µ–ª–∞—Ç—å",
        "–£—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ—Å–æ–∑–Ω–∞–Ω–∏—è, —á—Ç–æ —Ç—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è"
    ]
}

def build_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    builder.add(types.KeyboardButton(text="üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ"))
    builder.add(types.KeyboardButton(text="ü§™ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç"))
    builder.add(types.KeyboardButton(text="üí° –ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è"))
    builder.adjust(2, 2)
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command("start"))
async def start(message: types.Message):
    add_user(message.from_user.id, message.from_user.username, message.from_user.full_name)
    await message.answer(
        "ü§™ <b>CrazyBot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        "–ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –ü—Ä–æ–±—É–π:\n"
        "- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "- üé≤ –†–∞–Ω–¥–æ–º\n"
        "- ü§™ –§–∞–∫—Ç\n"
        "- üí° –ú—É–¥—Ä–æ—Å—Ç—å",
        parse_mode="HTML",
        reply_markup=build_keyboard()
    )

@dp.message(F.text.in_(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "/stats"]))
async def stats(message: types.Message):
    stats = get_stats()
    await message.answer(
        f"{random.choice(JOKES['stats'])}\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['new_users_today']}\n"
        f"‚úâÔ∏è –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
        f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['active_today']}",
        reply_markup=build_keyboard()
    )

@dp.message(F.text.in_(["üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ", "/random"]))
async def random_num(message: types.Message):
    num = random.randint(1, 100)
    for response, (min_, max_) in JOKES['number']:
        if min_ <= num <= max_:
            await message.answer(response.format(num), reply_markup=build_keyboard())
            break

@dp.message(F.text.in_(["ü§™ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç", "/fact"]))
async def fact(message: types.Message):
    await message.answer(
        f"ü§ì <b>–§–∞–∫—Ç:</b>\n{random.choice(JOKES['facts'])}",
        parse_mode="HTML",
        reply_markup=build_keyboard()
    )

@dp.message(F.text.in_(["üí° –ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è", "/wisdom"]))
async def wisdom(message: types.Message):
    await message.answer(
        f"üß† <b>–ú—É–¥—Ä–æ—Å—Ç—å:</b>\n{random.choice(JOKES['wisdoms'])}",
        parse_mode="HTML",
        reply_markup=build_keyboard()
    )

@dp.message(F.text)
async def text(message: types.Message):
    add_message(message.from_user.id, message.text)
    await message.answer(
        random.choice(["‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª!", "üìù –ó–∞–ø–∏—Å–∞–ª!", "üëå –ì–æ—Ç–æ–≤–æ!"]),
        reply_markup=build_keyboard()
    )