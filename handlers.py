from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from models import User, Question, PrivacySettings
from keyboards import *
from config import ADMIN_IDS
from datetime import datetime, timedelta
import database
from telegram import Update
from telegram.ext import ContextTypes
from models import User, Question, PrivacySettings
from keyboards import get_main_menu, get_privacy_settings

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    await update.message.reply_text(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=get_admin_menu()
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db_user, created = User.get_or_create(
        user_id=user.id,
        defaults={
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
    )
    
    if created:
        PrivacySettings.create(user=db_user)
    else:
        db_user.last_active = datetime.now()
        db_user.save()
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "üîπ –ü–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "üîπ –û—Ç–≤–µ—á–∞–π –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–π\n"
        "üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å",
        reply_markup=get_main_menu()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/ask @user –≤–æ–ø—Ä–æ—Å - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    )

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /ask @username –≤–æ–ø—Ä–æ—Å")
        return
    
    target_username = context.args[0].lstrip('@')
    question_text = ' '.join(context.args[1:])
    
    try:
        target_user = User.get(User.username == target_username)
    except User.DoesNotExist:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    sender = update.effective_user
    sender_user, _ = User.get_or_create(
        user_id=sender.id,
        defaults={
            'username': sender.username,
            'first_name': sender.first_name,
            'last_name': sender.last_name
        }
    )
    
    Question.create(
        from_user=sender_user,
        to_user=target_user,
        text=question_text,
        is_anonymous=True
    )
    
    await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = User.get(User.user_id == update.effective_user.id)
    questions_received = Question.select().where(Question.to_user == user).count()
    questions_answered = Question.select().where(
        (Question.to_user == user) & (Question.answered == True)
    ).count()
    
    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"ID: {user.user_id}\n"
        f"–ò–º—è: {user.full_name}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y')}\n\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_received}\n"
        f"–î–∞–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {questions_answered}"
    )
    
    if update.message:
        await update.message.reply_text(profile_text, reply_markup=get_main_menu())
    else:
        query = update.callback_query
        await query.edit_message_text(profile_text, reply_markup=get_main_menu())

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = User.get(User.user_id == update.effective_user.id)
    privacy = PrivacySettings.get(user=user)
    
    if update.message:
        await update.message.reply_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:",
            reply_markup=get_privacy_settings(privacy)
        )
    else:
        query = update.callback_query
        await query.edit_message_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:",
            reply_markup=get_privacy_settings(privacy)
        )

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "toggle_anonymous":
        await toggle_anonymous(update, context)
    
    elif data == "toggle_notify":
        await toggle_notify(update, context)
    
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if data == "profile":
        await show_profile(update, context)
    elif data == "privacy_settings":
        await show_settings(update, context)
    elif data == "my_questions":
        user = User.get(User.user_id == query.from_user.id)
        question = Question.select().where(
            (Question.to_user == user) & (Question.answered == False)
        ).first()
        
        if not question:
            await query.edit_message_text("üéâ –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!", reply_markup=get_main_menu())
            return
            
        await query.edit_message_text(
            f"‚ùì –í–æ–ø—Ä–æ—Å:\n\n{question.text}\n\n"
            f"üìÖ {question.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_question_options(question.id)
        )
    elif data == "help_command":
        await query.edit_message_text(
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/ask @user –≤–æ–ø—Ä–æ—Å - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=get_main_menu()
        )

    elif data == "how_it_works":
        await query.edit_message_text(
            "ü§ñ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n\n"
            "1. –î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π\n"
            "2. –ü–æ–ª—É—á–∞–µ—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "3. –û—Ç–≤–µ—á–∞–µ—Ç–µ –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç–µ\n\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
            reply_markup=get_main_menu()
        )
    
    
    # –í–æ–ø—Ä–æ—Å—ã
    elif data.startswith("answer_"):
        question_id = int(data.split("_")[1])
        context.user_data["answering"] = question_id
        context.user_data["public"] = False
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=get_back_to_menu())
    elif data.startswith("answer_public_"):
        question_id = int(data.split("_")[2])
        context.user_data["answering"] = question_id
        context.user_data["public"] = True
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç:", reply_markup=get_back_to_menu())
    elif data.startswith("ignore_"):
        question_id = int(data.split("_")[1])
        Question.delete().where(Question.id == question_id).execute()
        await query.edit_message_text("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω", reply_markup=get_main_menu())
    
    # –ê–¥–º–∏–Ω–∫–∞
    elif data == "admin_stats":
        if is_admin(query.from_user.id):
            stats = {
                'users': User.select().count(),
                'active': User.select().where(User.last_active > datetime.now() - timedelta(days=7)).count(),
                'questions': Question.select().count()
            }
            await query.edit_message_text(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
                f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}\n‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {stats['questions']}",
                reply_markup=get_back_to_admin_menu()
            )
    elif data == "admin_users":
        if is_admin(query.from_user.id):
            users = User.select().order_by(User.registration_date.desc()).limit(5)
            text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n".join(
                f"üë§ {u.full_name} (@{u.username or '–Ω–µ—Ç'})" for u in users
            )
            await query.edit_message_text(text, reply_markup=get_back_to_admin_menu())
    elif data == "admin_broadcast":
        if is_admin(query.from_user.id):
            context.user_data["broadcasting"] = True
            await query.edit_message_text(
                "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=get_back_to_admin_menu()
            )
    elif data == "admin_panel":
        if is_admin(query.from_user.id):
            await query.edit_message_text(
                "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=get_admin_menu()
            )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    elif data == "main_menu":
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    if "answering" in context.user_data:
        question = Question.get(Question.id == context.user_data["answering"])
        question.answer_text = update.message.text
        question.answered = True
        question.answer_public = context.user_data["public"]
        question.answered_at = datetime.now()
        question.save()
        
        del context.user_data["answering"]
        del context.user_data["public"]
        
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=get_main_menu())
        return
    
    # –†–∞—Å—Å—ã–ª–∫–∞
    if context.user_data.get("broadcasting"):
        if is_admin(update.effective_user.id):
            results = {'success': 0, 'failed': 0}
            for user in User.select():
                try:
                    await context.bot.send_message(user.user_id, text=update.message.text)
                    results['success'] += 1
                except:
                    results['failed'] += 1
            del context.user_data["broadcasting"]
            await update.message.reply_text(
                f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ {results['success']}\n‚ùå {results['failed']}",
                reply_markup=get_admin_menu()
            )
        return
    
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error = str(context.error)
    print(f"–û—à–∏–±–∫–∞: {error}")
    
    if update.callback_query:
        await update.callback_query.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
    elif update.message:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=get_main_menu()
        )
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /ask @username –≤–æ–ø—Ä–æ—Å")
        return
    
    target_username = context.args[0].lstrip('@')
    question_text = ' '.join(context.args[1:])
    
    try:
        target_user = User.get(User.username == target_username)
    except User.DoesNotExist:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    privacy = PrivacySettings.get_or_none(user=target_user)
    if not privacy:
        privacy = PrivacySettings.create(user=target_user)
    
    if not privacy.allow_anonymous_questions:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    sender = update.effective_user
    sender_user, _ = User.get_or_create(
        user_id=sender.id,
        defaults={'username': sender.username, 'first_name': sender.first_name, 'last_name': sender.last_name}
    )
    
    Question.create(
        from_user=sender_user,
        to_user=target_user,
        text=question_text,
        is_anonymous=True,
        created_at=datetime.now()
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    if privacy.notify_new_question:
        try:
            await context.bot.send_message(
                chat_id=target_user.user_id,
                text=f"üì© –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å!\n\n{question_text}\n\n"
                     f"–û—Ç–≤–µ—Ç—å—Ç–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã'",
                reply_markup=get_main_menu()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())

async def toggle_anonymous(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = User.get(User.user_id == query.from_user.id)
    privacy = PrivacySettings.get(user=user)
    privacy.allow_anonymous_questions = not privacy.allow_anonymous_questions
    privacy.save()
    
    await query.edit_message_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:",
        reply_markup=get_privacy_settings(privacy)
    )

async def toggle_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = User.get(User.user_id == query.from_user.id)
    privacy = PrivacySettings.get(user=user)
    privacy.notify_new_question = not privacy.notify_new_question
    privacy.save()
    
    await query.edit_message_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:",
        reply_markup=get_privacy_settings(privacy)
    )